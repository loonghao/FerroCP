name: Build PGO wheel
description: Builds a PGO-optimized wheel for ferrocp

inputs:
  interpreter:
    description: 'Python interpreter to build the wheel for'
    required: true
  rust-toolchain:
    description: 'Rust toolchain to use'
    required: true
    default: 'stable'
  target:
    description: 'Rust target to build for'
    required: false

outputs:
  wheel:
    description: 'Path to the built wheel'
    value: ${{ steps.find_wheel.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: Prepare profiling directory
      shell: bash
      run: |
        # Create profiling directory with proper permissions
        mkdir -p ${{ github.workspace }}/profdata
        echo "Created profiling directory: ${{ github.workspace }}/profdata"
    
    - name: Build initial wheel for profiling
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out pgo-wheel
          --interpreter ${{ inputs.interpreter }}
          ${{ inputs.target && format('--target {0}', inputs.target) || '' }}
        rust-toolchain: ${{ inputs.rust-toolchain }}
        before-script-linux: |
          # Install build tools in manylinux container
          yum install -y gcc gcc-c++ || (apt-get update && apt-get install -y gcc g++)
          which gcc && gcc --version | head -1
          # Verify BLAKE3_NO_ASM is set
          echo "BLAKE3_NO_ASM=${BLAKE3_NO_ASM:-1}"
        docker-options: -e CI -e CC=gcc -e CXX=g++ -e BLAKE3_NO_ASM=1 -e RUSTFLAGS
      env:
        RUSTFLAGS: '-Cprofile-generate=${{ github.workspace }}/profdata'
        BLAKE3_NO_ASM: '1'
    
    - name: Detect Rust host
      shell: bash
      run: |
        RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2)
        echo "RUST_HOST=$RUST_HOST" >> "$GITHUB_ENV"
        echo "Detected Rust host: $RUST_HOST"
    
    - name: Install wheel and generate PGO data
      shell: bash
      run: |
        echo "Installing wheel for profiling..."
        uv sync --group testing
        uv pip install ferrocp --no-index --no-deps --find-links pgo-wheel --force-reinstall
        
        echo "Running benchmarks to collect profile data..."
        # Run basic functionality tests to collect profile data
        uv run python -c "
        import ferrocp
        import tempfile
        import os
        from pathlib import Path
        
        # Create test data
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            source_dir = temp_path / 'source'
            dest_dir = temp_path / 'dest'
            source_dir.mkdir()
            dest_dir.mkdir()
            
            # Create test files
            for i in range(100):
                test_file = source_dir / f'test_{i}.txt'
                test_file.write_text(f'Test content {i}' * 1000)
            
            # Run copy operations to generate profile data
            engine = ferrocp.CopyEngine()
            options = ferrocp.CopyOptions()
            for i in range(10):
                try:
                    engine.copy_file(
                        str(source_dir / f'test_{i}.txt'),
                        str(dest_dir / f'test_{i}.txt'),
                        options
                    )
                except Exception as e:
                    print(f'Copy operation {i} failed: {e}')
                    continue
        
        print('Profile data collection completed')
        "
        
        # Also run pytest benchmarks if they exist and pytest-benchmark is available
        if [ -d "benchmarks" ]; then
          echo "Checking for pytest-benchmark availability..."
          if uv run python -c "import pytest_benchmark" 2>/dev/null; then
            echo "Running pytest benchmarks for PGO data collection..."
            uv run pytest benchmarks/ --benchmark-only --benchmark-sort=mean || echo "Benchmark tests failed, continuing..."
          else
            echo "pytest-benchmark not available, skipping pytest benchmarks"
          fi
        fi
    
    - name: Setup LLVM tools
      shell: bash
      run: |
        # Try multiple approaches to find llvm-profdata
        echo "Searching for llvm-profdata tool..."

        # Method 1: Standard rustup location
        RUST_HOST=$(rustc -Vv | grep host | cut -d ' ' -f 2)
        LLVM_PROFDATA="$HOME/.rustup/toolchains/${{ inputs.rust-toolchain }}-$RUST_HOST/lib/rustlib/$RUST_HOST/bin/llvm-profdata"

        if [ -f "$LLVM_PROFDATA" ]; then
          echo "Found llvm-profdata at: $LLVM_PROFDATA"
        else
          # Method 2: Search in rustup directory
          echo "Searching in rustup directory..."
          LLVM_PROFDATA=$(find $HOME/.rustup -name "llvm-profdata*" -type f 2>/dev/null | head -1)

          if [ -n "$LLVM_PROFDATA" ] && [ -f "$LLVM_PROFDATA" ]; then
            echo "Found llvm-profdata at: $LLVM_PROFDATA"
          else
            # Method 3: Use system llvm-profdata if available
            if command -v llvm-profdata >/dev/null 2>&1; then
              LLVM_PROFDATA=$(which llvm-profdata)
              echo "Using system llvm-profdata: $LLVM_PROFDATA"
            else
              echo "Warning: llvm-profdata not found, PGO will be skipped"
              LLVM_PROFDATA=""
            fi
          fi
        fi

        echo "LLVM_PROFDATA=$LLVM_PROFDATA" >> "$GITHUB_ENV"
    
    - name: Merge PGO data
      shell: bash
      run: |
        echo "Merging profile data..."
        ls -la ${{ github.workspace }}/profdata/

        if [ -n "${{ env.LLVM_PROFDATA }}" ] && [ -f "${{ env.LLVM_PROFDATA }}" ]; then
          if [ -n "$(ls -A ${{ github.workspace }}/profdata/ 2>/dev/null)" ]; then
            echo "Merging profile data with llvm-profdata..."
            ${{ env.LLVM_PROFDATA }} merge -o ${{ github.workspace }}/merged.profdata ${{ github.workspace }}/profdata/*
            echo "Profile data merged successfully"
            ls -la ${{ github.workspace }}/merged.profdata
          else
            echo "Warning: No profile data found, creating empty profile"
            touch ${{ github.workspace }}/merged.profdata
          fi
        else
          echo "Warning: llvm-profdata not available, skipping PGO data merge"
          echo "Creating empty profile file for compatibility"
          touch ${{ github.workspace }}/merged.profdata
        fi
    
    - name: Build PGO-optimized wheel
      uses: PyO3/maturin-action@v1
      with:
        manylinux: auto
        args: >
          --release
          --out dist
          --interpreter ${{ inputs.interpreter }}
          ${{ inputs.target && format('--target {0}', inputs.target) || '' }}
        rust-toolchain: ${{ inputs.rust-toolchain }}
        before-script-linux: |
          # Install build tools in manylinux container
          yum install -y gcc gcc-c++ || (apt-get update && apt-get install -y gcc g++)
          which gcc && gcc --version | head -1
          # Verify BLAKE3_NO_ASM is set
          echo "BLAKE3_NO_ASM=${BLAKE3_NO_ASM:-1}"
        docker-options: -e CI -e CC=gcc -e CXX=g++ -e BLAKE3_NO_ASM=1 -e RUSTFLAGS
      env:
        RUSTFLAGS: '-Cprofile-use=${{ github.workspace }}/merged.profdata'
        BLAKE3_NO_ASM: '1'
    
    - name: Find built wheel
      id: find_wheel
      shell: bash
      run: |
        wheel_path=$(ls dist/*.whl | head -1)
        echo "path=$wheel_path" >> "$GITHUB_OUTPUT"
        echo "Built PGO wheel: $wheel_path"
        ls -la dist/
