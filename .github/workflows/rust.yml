name: Rust Build and Test

on:
  push:
    branches: [ main, simplified-build ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - build
          - test
          - lint
          - docs
          - release

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  RUST_LOG: info
  CPM_SOURCE_CACHE: ${{ github.workspace }}/.cache/CPM

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.task == 'all' || github.event.inputs.task == 'lint' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff black
      
      - name: Run Python linting
        run: |
          ruff check src tests
          black --check src tests

  build-linux:
    name: Build Linux (Python ${{ matrix.python }})
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.task == 'all' || github.event.inputs.task == 'build' }}
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CPM_SOURCE_CACHE }}
          key: ${{ runner.os }}-cpm-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cpm-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libclang-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest
      
      - name: Build wheel
        run: maturin build --release --strip --features python
      
      - name: Install wheel
        run: pip install --no-index --find-links=target/wheels py-eacopy
      
      - name: Run tests
        run: pytest tests/test_rust_binding.py -v
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-linux-py${{ matrix.python }}
          path: target/wheels/*.whl

  build-windows:
    name: Build Windows (Python ${{ matrix.python }})
    runs-on: windows-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.task == 'all' || github.event.inputs.task == 'build' }}
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CPM_SOURCE_CACHE }}
          key: ${{ runner.os }}-cpm-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cpm-
      
      - name: Install system dependencies
        run: |
          choco install cmake ninja llvm
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest
      
      - name: Build wheel
        run: maturin build --release --strip --features python
      
      - name: Install wheel
        run: pip install --no-index --find-links=target/wheels py-eacopy
      
      - name: Run tests
        run: pytest tests/test_rust_binding.py -v
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-py${{ matrix.python }}
          path: target/wheels/*.whl

  build-macos:
    name: Build macOS (Python ${{ matrix.python }})
    runs-on: macos-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.task == 'all' || github.event.inputs.task == 'build' }}
    strategy:
      fail-fast: false
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Cache CPM dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CPM_SOURCE_CACHE }}
          key: ${{ runner.os }}-cpm-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cpm-
      
      - name: Install system dependencies
        run: |
          brew install cmake ninja llvm
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest
      
      - name: Build wheel
        run: maturin build --release --strip --features python
      
      - name: Install wheel
        run: pip install --no-index --find-links=target/wheels py-eacopy
      
      - name: Run tests
        run: pytest tests/test_rust_binding.py -v
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-macos-py${{ matrix.python }}
          path: target/wheels/*.whl

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.task == 'all' || github.event.inputs.task == 'docs' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install sphinx pydata-sphinx-theme myst-parser
          cargo install cargo-doc-all
      
      - name: Build Rust documentation
        run: cargo doc --no-deps --all-features
      
      - name: Build Python documentation
        run: |
          cd docs
          make html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/_build/html
            target/doc
