name: CodSpeed Performance Monitoring

on:
  # Run on pushes to main branch
  push:
    branches:
      - main
      - rust-native-implementation
  # Run on all pull requests
  pull_request:
  # Allow manual triggering for backtest analysis
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Type of benchmarks to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - comprehensive
          - parallel

env:
  # Performance optimization flags
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # CodSpeed configuration
  CODSPEED_ENABLE_PGO: true
  CODSPEED_REGRESSION_THRESHOLD: 5

jobs:
  benchmarks:
    name: Run CodSpeed benchmarks
    runs-on: ubuntu-latest
    # Run standard benchmarks by default, or when explicitly requested
    if: github.event_name != 'workflow_dispatch' || inputs.benchmark_type == 'standard' || inputs.benchmark_type == 'comprehensive'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # Install build tools for Linux
    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          binutils \
          pkg-config \
          libssl-dev \
          lld \
          clang

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    # Set stable build environment
    - name: Set build environment
      shell: bash
      run: |
        echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C opt-level=3" >> $GITHUB_ENV
        # Use clang as compiler and linker for better reliability
        if command -v clang >/dev/null 2>&1; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C opt-level=3 -C linker=clang" >> $GITHUB_ENV
          echo "✅ Using clang as compiler and linker"
        fi

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-pgo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-pgo-
          ${{ runner.os }}-cargo-

    - name: Install dependencies
      run: |
        uv sync --group testing

    - name: Build PGO-optimized project
      uses: ./.github/actions/build-pgo-wheel
      with:
        interpreter: python3.11
        rust-toolchain: stable

    - name: Install PGO wheel
      run: |
        wheel_file=$(ls dist/*.whl | head -1)
        if [ -n "$wheel_file" ]; then
          echo "Installing PGO wheel: $wheel_file"
          uv pip install "$wheel_file" --force-reinstall
        else
          echo "No PGO wheel found, falling back to regular build"
          uv run nox -s build
        fi

    - name: Verify installation
      run: |
        uv run python -c "import ferrocp; print(f'PGO-optimized ferrocp imported successfully')"

    - name: Generate test data for benchmarks
      run: |
        mkdir -p benchmarks/data/test_files
        uv run python benchmarks/data/generate_test_data.py --output-dir benchmarks/data/test_files

    - name: Run CodSpeed benchmarks
      uses: CodSpeedHQ/action@v3
      with:
        run: uv run pytest benchmarks/test_codspeed.py --codspeed --benchmark-sort=mean
        token: ${{ secrets.CODSPEED_TOKEN }}
      env:
        # Enable PGO-specific optimizations
        CODSPEED_PGO_ENABLED: true
        # Set performance regression threshold (5% by default)
        CODSPEED_REGRESSION_THRESHOLD: ${{ env.CODSPEED_REGRESSION_THRESHOLD }}
        # Additional Rust performance flags
        RUSTFLAGS: "-C target-cpu=native -C opt-level=3"

    - name: Save CodSpeed results
      if: always()
      run: |
        # Create CodSpeed results summary
        echo "# CodSpeed Performance Results" > codspeed-summary.md
        echo "**Run ID:** ${{ github.run_id }}" >> codspeed-summary.md
        echo "**Commit:** ${{ github.sha }}" >> codspeed-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> codspeed-summary.md
        echo "**Timestamp:** $(date -u)" >> codspeed-summary.md
        echo "" >> codspeed-summary.md
        echo "CodSpeed benchmarks completed. Check the CodSpeed dashboard for detailed results." >> codspeed-summary.md

    - name: Upload CodSpeed summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: codspeed-summary-${{ github.run_number }}
        path: codspeed-summary.md
        retention-days: 30

  # Additional job for comprehensive benchmarks (optional)
  comprehensive-benchmarks:
    name: Run comprehensive benchmarks
    runs-on: ubuntu-latest
    # Run on main branch pushes or when explicitly requested
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rust-native-implementation') || (github.event_name == 'workflow_dispatch' && inputs.benchmark_type == 'comprehensive')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # Install build tools for Linux
    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          binutils \
          pkg-config \
          libssl-dev \
          lld \
          clang

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    # Set stable build environment
    - name: Set build environment
      shell: bash
      run: |
        echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C opt-level=3" >> $GITHUB_ENV
        # Use clang as compiler and linker for better reliability
        if command -v clang >/dev/null 2>&1; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C opt-level=3 -C linker=clang" >> $GITHUB_ENV
          echo "✅ Using clang as compiler and linker"
        fi

    - name: Install dependencies
      run: |
        uv sync --group testing

    - name: Build PGO-optimized project
      uses: ./.github/actions/build-pgo-wheel
      with:
        interpreter: python3.11
        rust-toolchain: stable

    - name: Install PGO wheel
      run: |
        wheel_file=$(ls dist/*.whl | head -1)
        if [ -n "$wheel_file" ]; then
          echo "Installing PGO wheel: $wheel_file"
          uv pip install "$wheel_file" --force-reinstall
        else
          echo "No PGO wheel found, falling back to regular build"
          uv run nox -s build
        fi

    - name: Generate test data for comprehensive benchmarks
      run: |
        mkdir -p benchmarks/data/test_files
        uv run python benchmarks/data/generate_test_data.py --output-dir benchmarks/data/test_files

    - name: Run all benchmarks for CodSpeed
      uses: CodSpeedHQ/action@v3
      with:
        run: uv run pytest benchmarks/ --codspeed -k "not comparison" --benchmark-sort=mean --benchmark-min-rounds=3
        token: ${{ secrets.CODSPEED_TOKEN }}
      env:
        # Enable PGO-specific optimizations
        CODSPEED_PGO_ENABLED: true
        # More strict threshold for comprehensive benchmarks
        CODSPEED_REGRESSION_THRESHOLD: 3
        # Additional Rust performance flags
        RUSTFLAGS: "-C target-cpu=native -C opt-level=3"

  # Parallel benchmarks for faster execution (if needed)
  parallel-benchmarks:
    name: Run parallel benchmarks
    runs-on: ubuntu-latest
    # Only run when explicitly requested
    if: github.event_name == 'workflow_dispatch' && inputs.benchmark_type == 'parallel'
    strategy:
      matrix:
        shard: [1, 2, 3, 4]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # Install build tools for Linux
    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          binutils \
          pkg-config \
          libssl-dev \
          lld \
          clang

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    # Set stable build environment
    - name: Set build environment
      shell: bash
      run: |
        echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C opt-level=3" >> $GITHUB_ENV
        # Use clang as compiler and linker for better reliability
        if command -v clang >/dev/null 2>&1; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C opt-level=3 -C linker=clang" >> $GITHUB_ENV
          echo "✅ Using clang as compiler and linker"
        fi

    - name: Install dependencies
      run: |
        uv sync --group testing
        uv add pytest-test-groups

    - name: Build PGO-optimized project
      uses: ./.github/actions/build-pgo-wheel
      with:
        interpreter: python3.11
        rust-toolchain: stable

    - name: Install PGO wheel
      run: |
        wheel_file=$(ls dist/*.whl | head -1)
        if [ -n "$wheel_file" ]; then
          echo "Installing PGO wheel: $wheel_file"
          uv pip install "$wheel_file" --force-reinstall
        else
          echo "No PGO wheel found, falling back to regular build"
          uv run nox -s build
        fi

    - name: Generate test data for parallel benchmarks
      run: |
        mkdir -p benchmarks/data/test_files
        uv run python benchmarks/data/generate_test_data.py --output-dir benchmarks/data/test_files

    - name: Run sharded benchmarks
      uses: CodSpeedHQ/action@v3
      with:
        run: uv run pytest benchmarks/test_codspeed.py --codspeed --test-group=${{ matrix.shard }} --test-group-count=4 --benchmark-sort=mean
        token: ${{ secrets.CODSPEED_TOKEN }}
      env:
        # Enable PGO-specific optimizations
        CODSPEED_PGO_ENABLED: true
        # Standard threshold for parallel benchmarks
        CODSPEED_REGRESSION_THRESHOLD: ${{ env.CODSPEED_REGRESSION_THRESHOLD }}
        # Additional Rust performance flags
        RUSTFLAGS: "-C target-cpu=native"
        # Shard identifier for CodSpeed
        CODSPEED_SHARD: ${{ matrix.shard }}
