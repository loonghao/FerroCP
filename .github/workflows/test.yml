name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    # Clean build cache on macOS to avoid ring compilation issues
    - name: Clean build cache (macOS)
      if: matrix.os == 'macos-latest'
      run: cargo clean

    # Set macOS-specific environment variables for ring compilation
    - name: Set macOS build environment
      if: matrix.os == 'macos-latest'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
        # Force ring to use precompiled assembly
        echo "RING_PREGENERATE_ASM=1" >> $GITHUB_ENV
        # Disable CPU feature detection for ring
        echo "CARGO_CFG_TARGET_FEATURE=" >> $GITHUB_ENV

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Build workspace
      run: cargo build --workspace --all-features
    
    - name: Run tests (excluding ferrocp-python)
      run: |
        cargo test --workspace --all-features --exclude ferrocp-python
    
    - name: Build ferrocp-python (without tests)
      run: |
        cargo build -p ferrocp-python
    
    - name: Run doctests
      run: cargo test --workspace --doc --exclude ferrocp-python

  coverage:
    name: Code Coverage (Python + Rust)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Install dependencies
      run: |
        uv sync --group testing

    - name: Run Python tests and collect coverage
      run: |
        uv run nox -s test

    - name: Run Rust tests and collect coverage
      run: |
        uv run nox -s rust_coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: 'coverage.xml,coverage/cobertura.xml,coverage/python-coverage.xml'
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
