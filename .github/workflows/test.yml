name: Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  # Multi-platform testing following VFX Platform standards
  test:
    name: Test (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: format-check
    # Conditional execution to reduce macOS queue time
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.labels.*.name, 'test-macos') ||
        contains(github.event.pull_request.title, '[macos]') ||
        contains(github.event.pull_request.title, '[all-platforms]') ||
        github.event.pull_request.draft == false
      ))
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux - VFX Platform CY2025: gcc 11.2.1+, glibc 2.28+ (Always run)
          # Using Ubuntu 22.04 with cross-compilation for VFX Platform compatibility
          - os: linux
            arch: x86_64
            runner: ubuntu-22.04  # Updated from ubuntu-20.04 (retiring 2025-04-15)
            target: x86_64-unknown-linux-gnu
            priority: high
            cross_compile: false

          # Linux ARM64 for modern VFX workflows (Cross-compiled)
          - os: linux
            arch: aarch64
            runner: ubuntu-22.04  # Cross-compile ARM64 on x86_64
            target: aarch64-unknown-linux-gnu
            priority: medium
            cross_compile: true

          # Note: macOS testing moved to separate workflow (.github/workflows/test-macos.yml)
          # to avoid GitHub Actions macOS runner queue issues

          # Windows - VFX Platform CY2025: VS 2022 v17.6+, Windows SDK 10.0.20348+
          - os: windows
            arch: x86_64
            runner: windows-2022  # VS 2022, Windows SDK 10.0.20348+
            target: x86_64-pc-windows-msvc
            priority: medium

    steps:
    - uses: actions/checkout@v4

    # Platform-specific dependency installation
    - name: Install Linux dependencies
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          binutils \
          lld \
          clang

        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.cross_compile }}" = "true" ]; then
          echo "üîß Installing cross-compilation tools for ${{ matrix.arch }}"

          # Add ARM64 architecture for cross-compilation
          sudo dpkg --add-architecture arm64
          sudo apt-get update

          # Install cross-compilation toolchain
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross

          # Note: We'll use static linking for OpenSSL to avoid cross-compilation issues
          echo "üìã Using static OpenSSL linking for ARM64 cross-compilation"
        fi

        # Verify VFX Platform compatibility (Ubuntu 22.04 has glibc 2.35, gcc 11.2+)
        echo "üé¨ Verifying VFX Platform compatibility..."
        gcc --version
        ldd --version

    - name: Install macOS dependencies
      if: matrix.os == 'macos'
      run: |
        # Ensure we have the latest Xcode command line tools
        # VFX Platform requires specific SDK versions
        xcode-select --install || true

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.arch }}

    # Platform-specific environment setup
    - name: Configure build environment
      shell: bash
      run: |
        echo "Setting up build environment for ${{ matrix.os }}-${{ matrix.arch }}"

        # VFX Platform specific configurations
        if [ "${{ matrix.os }}" = "linux" ]; then
          # Blake3 compatibility for Linux
          echo "BLAKE3_NO_ASM=1" >> $GITHUB_ENV
          # Use lld linker for better performance
          echo "RUSTFLAGS=-C link-arg=-fuse-ld=lld" >> $GITHUB_ENV

          # Cross-compilation setup for ARM64
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            echo "üîß Configuring cross-compilation for ${{ matrix.arch }}"
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

            # Use static linking for OpenSSL to avoid cross-compilation issues
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV

            # Additional cross-compilation flags
            echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
            echo "RUSTFLAGS=-C link-arg=-fuse-ld=lld -C target-feature=+crt-static" >> $GITHUB_ENV
          fi

          # VFX Platform glibc compatibility note
          echo "üìã Ubuntu 22.04 provides glibc 2.35 (exceeds VFX Platform CY2025 requirement of 2.28+)"
        elif [ "${{ matrix.os }}" = "macos" ]; then
          # VFX Platform macOS deployment target
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV
          else
            echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          fi
        fi

    - name: Run tests
      run: |
        # Run workspace tests excluding Python extension
        cargo test --workspace --exclude ferrocp-python --target ${{ matrix.target }} --verbose
      env:
        RUST_LOG: debug

    - name: Build Python extension
      # Only build Python extension on primary platforms to save CI time
      if: matrix.os == 'linux' && matrix.arch == 'x86_64' || matrix.os == 'macos' && matrix.arch == 'x86_64' || matrix.os == 'windows'
      run: cargo build -p ferrocp-python --target ${{ matrix.target }}

    - name: Build CLI binary
      run: cargo build --bin ferrocp --target ${{ matrix.target }} --release

    # VFX Platform compatibility verification
    - name: Verify VFX Platform compatibility
      shell: bash
      run: |
        echo "üé¨ Verifying VFX Platform compatibility..."

        # Check binary exists and is executable
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_PATH="target/${{ matrix.target }}/release/ferrocp.exe"
        else
          BINARY_PATH="target/${{ matrix.target }}/release/ferrocp"
        fi

        if [ -f "$BINARY_PATH" ]; then
          echo "‚úÖ Binary built successfully: $BINARY_PATH"
          ls -la "$BINARY_PATH"

          # Test basic functionality
          if [ "${{ matrix.arch }}" != "aarch64" ] || [ "${{ matrix.os }}" != "linux" ]; then
            # Skip execution test for cross-compiled ARM64 Linux binaries
            echo "üß™ Testing basic functionality..."
            "$BINARY_PATH" --version || echo "‚ö†Ô∏è  Version check failed (may be expected for cross-compiled binaries)"
          else
            echo "‚è≠Ô∏è  Skipping execution test for cross-compiled ARM64 binary"
          fi
        else
          echo "‚ùå Binary not found: $BINARY_PATH"
          exit 1
        fi
