name: Build and Release

# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases
  pull-requests: write  # For commenting on PRs
  id-token: write   # For PyPI trusted publishing

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  release:
    types: [published]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Skip building wheels and only run tests'
        required: false
        default: false
        type: boolean
      python-version:
        description: 'Python version to use for testing'
        required: false
        default: '3.10'
        type: string
      os:
        description: 'OS to run tests on'
        required: false
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-latest

jobs:
  # Build and test the Rust workspace
  build-and-test:
    name: Build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}

      # Clean build cache on macOS to avoid ring compilation issues
      - name: Clean build cache (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo clean

      # Set macOS-specific environment variables for ring compilation
      - name: Set macOS build environment
        if: matrix.os == 'macos-latest'
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          # Force ring to use precompiled assembly
          echo "RING_PREGENERATE_ASM=1" >> $GITHUB_ENV
          # Disable CPU feature detection for ring
          echo "CARGO_CFG_TARGET_FEATURE=" >> $GITHUB_ENV

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D clippy::correctness -D clippy::suspicious -D clippy::complexity -W clippy::perf -W clippy::style

      - name: Build workspace with optimizations
        run: |
          echo "Building workspace with release optimizations..."
          # Set additional optimization flags
          export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
          cargo build --workspace --all-features --release
          echo "Workspace build completed successfully"

      - name: Run tests (excluding ferrocp-python)
        run: cargo test --workspace --all-features --exclude ferrocp-python --release

      - name: Build ferrocp-python (without tests)
        run: cargo build -p ferrocp-python --release

      - name: Build CLI binary with optimizations
        run: |
          echo "Building optimized CLI binary for ${{ matrix.os }}"
          # Set additional optimization flags for CLI binary
          export RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C lto=fat"
          cargo build --bin ferrocp --release

          # Verify binary was created and get info
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "Windows binary info:"
            ls -la target/release/ferrocp.exe
            file target/release/ferrocp.exe || echo "file command not available on Windows"
            # Get file size
            powershell -Command "(Get-Item target/release/ferrocp.exe).length"
          else
            echo "Unix binary info:"
            ls -la target/release/ferrocp
            file target/release/ferrocp
            # Strip debug symbols if not already done
            strip target/release/ferrocp || echo "strip not available or already stripped"
            ls -la target/release/ferrocp
          fi

      - name: Test CLI binary functionality
        run: |
          echo "Testing CLI binary functionality..."
          cd target/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "Testing Windows binary:"
            ./ferrocp.exe --version || echo "Version command failed"
            ./ferrocp.exe --help | head -10 || echo "Help command failed"
          else
            echo "Testing Unix binary:"
            ./ferrocp --version || echo "Version command failed"
            ./ferrocp --help | head -10 || echo "Help command failed"
          fi

      - name: Generate checksums
        run: |
          cd target/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ferrocp.exe SHA256 > ferrocp.exe.sha256
            echo "Windows checksum:"
            cat ferrocp.exe.sha256
          else
            sha256sum ferrocp > ferrocp.sha256
            echo "Unix checksum:"
            cat ferrocp.sha256
          fi

      - name: Upload CLI binary and checksums
        uses: actions/upload-artifact@v4
        with:
          name: ferrocp-cli-${{ matrix.os }}
          path: |
            target/release/ferrocp${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            target/release/ferrocp${{ matrix.os == 'windows-latest' && '.exe.sha256' || '.sha256' }}
          if-no-files-found: error

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [build-and-test]
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # List all artifacts
      - name: List all artifacts
        run: find artifacts -type f | sort

      # Prepare release assets
      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy and rename CLI binaries with checksums
          echo "Preparing Linux assets..."
          cp artifacts/ferrocp-cli-ubuntu-latest/ferrocp release-assets/ferrocp-linux-x86_64
          cp artifacts/ferrocp-cli-ubuntu-latest/ferrocp.sha256 release-assets/ferrocp-linux-x86_64.sha256

          echo "Preparing Windows assets..."
          cp artifacts/ferrocp-cli-windows-latest/ferrocp.exe release-assets/ferrocp-windows-x86_64.exe
          cp artifacts/ferrocp-cli-windows-latest/ferrocp.exe.sha256 release-assets/ferrocp-windows-x86_64.exe.sha256

          echo "Preparing macOS assets..."
          cp artifacts/ferrocp-cli-macos-latest/ferrocp release-assets/ferrocp-macos-x86_64
          cp artifacts/ferrocp-cli-macos-latest/ferrocp.sha256 release-assets/ferrocp-macos-x86_64.sha256

          # Make binaries executable
          chmod +x release-assets/ferrocp-linux-x86_64
          chmod +x release-assets/ferrocp-macos-x86_64

          # Generate combined checksums file
          echo "# FerroCP Binary Checksums" > release-assets/CHECKSUMS.txt
          echo "Generated on: $(date -u)" >> release-assets/CHECKSUMS.txt
          echo "" >> release-assets/CHECKSUMS.txt

          for file in release-assets/*.sha256; do
            if [ -f "$file" ]; then
              echo "## $(basename "$file" .sha256)" >> release-assets/CHECKSUMS.txt
              cat "$file" >> release-assets/CHECKSUMS.txt
              echo "" >> release-assets/CHECKSUMS.txt
            fi
          done

          echo "Release assets prepared:"
          ls -la release-assets/

      # Generate release notes from changelog
      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        id: release-notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}

          # Try to find the version in CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            CHANGES=$(grep -A 100 "## \[$VERSION\]" CHANGELOG.md | grep -B 100 -m 2 "^## " | grep -v "^## \[$VERSION\]" | grep -v "^## " | sed '/^$/d')
          else
            CHANGES="No changelog found for version $VERSION"
          fi

          # Create release notes
          cat > release-notes.md << EOF
          # FerroCP $VERSION

          High-performance file copying tool built with Rust.

          ## Changes
          $CHANGES

          ## Downloads
          - **Linux (x86_64)**: [ferrocp-linux-x86_64](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-linux-x86_64) ([checksum](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-linux-x86_64.sha256))
          - **Windows (x86_64)**: [ferrocp-windows-x86_64.exe](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-windows-x86_64.exe) ([checksum](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-windows-x86_64.exe.sha256))
          - **macOS (x86_64)**: [ferrocp-macos-x86_64](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-macos-x86_64) ([checksum](https://github.com/loonghao/ferrocp/releases/download/$VERSION/ferrocp-macos-x86_64.sha256))
          - **All Checksums**: [CHECKSUMS.txt](https://github.com/loonghao/ferrocp/releases/download/$VERSION/CHECKSUMS.txt)

          ## Installation
          1. Download the appropriate binary for your platform
          2. Verify the checksum (recommended for security)
          3. Make the binary executable (Linux/macOS): \`chmod +x ferrocp-*\`
          4. Add the binary to your PATH

          ## Verification
          To verify the integrity of your download:
          - **Linux/macOS**: \`sha256sum -c ferrocp-*.sha256\`
          - **Windows**: \`certutil -hashfile ferrocp-windows-x86_64.exe SHA256\`
          EOF
        shell: bash

      # Create GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          files: release-assets/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
