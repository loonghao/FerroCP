name: Test PGO Build

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to test'
        required: false
        default: '3.11'
        type: string

jobs:
  test-pgo-build:
    name: Test PGO Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version || '3.11' }}
    
    # Install build tools for Linux
    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          binutils \
          pkg-config \
          libssl-dev \
          lld \
          clang

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    # Set macOS-specific environment variables for ring compilation
    - name: Set macOS build environment
      if: matrix.os == 'macos-latest'
      run: |
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
        # Force ring to use precompiled assembly
        echo "RING_PREGENERATE_ASM=1" >> $GITHUB_ENV
        # Disable CPU feature detection for ring
        echo "CARGO_CFG_TARGET_FEATURE=" >> $GITHUB_ENV

    # Set stable build environment for all platforms
    - name: Set build environment
      shell: bash
      run: |
        echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C opt-level=3" >> $GITHUB_ENV
        # Use clang as compiler and linker for better reliability (Unix only)
        if [[ "${{ runner.os }}" != "Windows" ]] && command -v clang >/dev/null 2>&1; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C opt-level=3 -C linker=clang" >> $GITHUB_ENV
          echo "✅ Using clang as compiler and linker"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "✅ Using default Windows MSVC toolchain"
        fi

    - name: Install dependencies
      run: |
        uv sync --group testing
    
    - name: Test PGO build
      uses: ./.github/actions/build-pgo-wheel
      with:
        interpreter: python${{ inputs.python-version || '3.11' }}
        rust-toolchain: stable
    
    - name: Test PGO wheel
      shell: bash
      run: |
        echo "Testing PGO-optimized wheel..."
        wheel_file=$(ls dist/*.whl | head -1)
        if [ -n "$wheel_file" ]; then
          echo "Found wheel: $wheel_file"
          uv pip install "$wheel_file" --force-reinstall
          
          # Test basic functionality
          uv run python -c "
          import ferrocp
          import tempfile
          from pathlib import Path
          
          print('Testing PGO-optimized ferrocp...')
          
          with tempfile.TemporaryDirectory() as temp_dir:
              temp_path = Path(temp_dir)
              source_file = temp_path / 'test.txt'
              dest_file = temp_path / 'test_copy.txt'
              
              source_file.write_text('Hello, PGO!')
              
              eacopy = ferrocp.EACopy()
              try:
                  eacopy.copy_file(source_file, dest_file)
                  if dest_file.exists() and dest_file.read_text() == 'Hello, PGO!':
                      print('✅ PGO wheel test passed!')
                  else:
                      print('❌ PGO wheel test failed: file not copied correctly')
                      exit(1)
              except Exception as e:
                  print(f'❌ PGO wheel test failed: {e}')
                  exit(1)
          "
        else
          echo "❌ No wheel file found"
          exit 1
        fi
    
    - name: Upload PGO wheel
      uses: actions/upload-artifact@v4
      with:
        name: pgo-wheel-${{ matrix.os }}-py${{ inputs.python-version || '3.11' }}
        path: dist/*.whl
        retention-days: 7
