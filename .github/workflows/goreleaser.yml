name: GoReleaser

# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases
  packages: write    # For publishing Docker images
  id-token: write    # For PyPI Trusted Publishing and signing artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run in dry-run mode (no release created)'
        required: false
        default: false
        type: boolean

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: goreleaser

      # Install complete build toolchain for cross-compilation
      - name: Install complete build toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-multilib \
            gcc-aarch64-linux-gnu \
            gcc-mingw-w64-x86-64 \
            libc6-dev-arm64-cross \
            binutils \
            binutils-aarch64-linux-gnu \
            binutils-mingw-w64-x86-64 \
            binutils-multiarch \
            lld \
            clang \
            pkg-config \
            libssl-dev

          # Ensure linker is available in all standard locations
          sudo ln -sf /usr/bin/ld.bfd /usr/bin/ld || true
          sudo ln -sf /usr/bin/ld.bfd /usr/local/bin/ld || true
          sudo ln -sf /usr/bin/ld.bfd /usr/local/bin/ld.bfd || true
          sudo ln -sf /usr/bin/ld.gold /usr/local/bin/ld.gold || true

          # Ensure gcc can find the linker
          sudo ln -sf /usr/bin/ld.bfd /usr/lib/gcc/x86_64-linux-gnu/*/ld || true

          # Verify complete toolchain installation
          echo "=== Verifying build toolchain ==="
          which ld && ld --version | head -1
          which gcc && gcc --version | head -1
          which clang && clang --version | head -1
          which lld && lld --version | head -1

          echo "=== Verifying cross-compilation tools ==="
          aarch64-linux-gnu-gcc --version | head -1
          x86_64-w64-mingw32-gcc --version | head -1

          echo "=== Testing basic linking capability ==="
          echo 'int main(){return 0;}' | gcc -x c - -o /tmp/test_link && echo "✅ Basic linking test passed" || echo "❌ Basic linking test failed"
          rm -f /tmp/test_link

      # Set up Go (required by GoReleaser)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Install GoReleaser
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          install-only: true

      # Set up Python for wheel building
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install Python dependencies with proper environment setup
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install maturin[patchelf] twine build

          # Configure environment for maturin
          echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=clang -C link-arg=-fuse-ld=lld" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      # Build Python wheels using maturin-action with clang toolchain
      - name: Build Python wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist --interpreter python3.11
          rust-toolchain: stable
          manylinux: auto
          before-script-linux: |
            # Install clang toolchain in manylinux container
            yum install -y clang lld || (apt-get update && apt-get install -y clang lld)

            # Verify clang installation
            which clang && clang --version | head -1
            which lld && lld --version | head -1

            # Set up clang environment in container
            export CC=clang
            export CXX=clang++
            export RUSTFLAGS="-C linker=clang -C link-arg=-fuse-ld=lld"

            echo "✅ Clang toolchain configured in container"
          docker-options: -e CC=clang -e CXX=clang++ -e RUSTFLAGS="-C linker=clang -C link-arg=-fuse-ld=lld"
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true

      # Make scripts executable
      - name: Make scripts executable
        run: |
          chmod +x scripts/build-all-targets.sh
          chmod +x scripts/build-cross.sh

      # Run GoReleaser (excluding Python wheels)
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean ${{ github.event.inputs.dry-run == 'true' && '--snapshot' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Verify built artifacts
      - name: Verify built artifacts
        run: |
          echo "=== Verifying GoReleaser artifacts ==="
          ls -la dist/ || echo "No dist directory found"

          echo "=== Verifying Python wheels ==="
          ls -la dist/*.whl || echo "No Python wheels found"

          echo "=== Testing Python wheel import ==="
          if ls dist/*.whl 1> /dev/null 2>&1; then
            pip install dist/*.whl
            python -c "import ferrocp; print(f'FerroCP version: {ferrocp.__version__}')"
          else
            echo "No Python wheels to test"
          fi

      # Upload artifacts for dry-run
      - name: Upload artifacts (dry-run)
        if: github.event.inputs.dry-run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-artifacts
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.whl
            dist/*checksums.txt
          if-no-files-found: error

  # Test the released binaries
  test-binaries:
    needs: goreleaser
    if: github.event.inputs.dry-run != 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download release assets
        run: |
          # Get the latest release
          RELEASE_TAG=${GITHUB_REF#refs/tags/}
          
          # Determine the correct binary name for this OS
          case "${{ matrix.os }}" in
            ubuntu-latest)
              BINARY_NAME="ferrocp-${RELEASE_TAG#v}-linux-amd64.tar.gz"
              EXTRACT_CMD="tar -xzf"
              BINARY_FILE="ferrocp"
              ;;
            windows-latest)
              BINARY_NAME="ferrocp-${RELEASE_TAG#v}-windows-amd64.zip"
              EXTRACT_CMD="unzip"
              BINARY_FILE="ferrocp.exe"
              ;;
            macos-latest)
              BINARY_NAME="ferrocp-${RELEASE_TAG#v}-darwin-amd64.tar.gz"
              EXTRACT_CMD="tar -xzf"
              BINARY_FILE="ferrocp"
              ;;
          esac
          
          # Download and extract
          curl -L -o "$BINARY_NAME" "https://github.com/loonghao/FerroCP/releases/download/$RELEASE_TAG/$BINARY_NAME"
          $EXTRACT_CMD "$BINARY_NAME"
          
          # Make executable (Unix systems)
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x "$BINARY_FILE"
          fi
          
          # Test the binary
          ./"$BINARY_FILE" --version
          ./"$BINARY_FILE" --help | head -10
        shell: bash
