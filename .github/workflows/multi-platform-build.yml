name: Multi-Platform Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: linux,darwin,windows)'
        required: false
        default: 'linux,darwin,windows'
        type: string
      enable-pgo:
        description: 'Enable Profile-Guided Optimization'
        required: false
        default: true
        type: boolean
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Matrix build for all platforms
  build:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            runner: ubuntu-latest
            targets: "x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu"
          - platform: darwin
            runner: macos-latest
            targets: "x86_64-apple-darwin,aarch64-apple-darwin"
          - platform: windows
            runner: windows-latest
            targets: "x86_64-pc-windows-msvc"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.platform }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    # Platform-specific dependency installation
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          binutils \
          lld \
          clang \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu

    - name: Install macOS dependencies
      if: matrix.platform == 'darwin'
      run: |
        # Ensure we have the latest Xcode command line tools
        xcode-select --install || true

    # Check if this platform should be built
    - name: Check if platform should be built
      id: should-build
      shell: bash
      run: |
        PLATFORMS="${{ github.event.inputs.platforms || 'linux,darwin,windows' }}"
        if [[ "$PLATFORMS" == *"${{ matrix.platform }}"* ]]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
        fi

    # Run GoReleaser for this platform
    - name: Run GoReleaser Build
      if: steps.should-build.outputs.should-build == 'true'
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: latest
        args: build --snapshot --clean --single-target
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Test built binaries
    - name: Test Binaries
      if: steps.should-build.outputs.should-build == 'true'
      shell: bash
      run: |
        echo "🧪 Testing built binaries for ${{ matrix.platform }}..."
        
        # Find all built binaries
        if [ "${{ matrix.platform }}" = "windows" ]; then
          BINARIES=$(find dist -name "ferrocp.exe")
        else
          BINARIES=$(find dist -name "ferrocp" -type f)
        fi
        
        if [ -z "$BINARIES" ]; then
          echo "❌ No binaries found"
          echo "Contents of dist directory:"
          find dist -type f
          exit 1
        fi
        
        # Test each binary
        for BINARY in $BINARIES; do
          echo "🔍 Testing binary: $BINARY"
          ls -la "$BINARY"
          
          # Get binary size
          SIZE=$(stat -f%z "$BINARY" 2>/dev/null || stat -c%s "$BINARY" 2>/dev/null || echo "unknown")
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "📏 Binary size: ${SIZE} bytes (~${SIZE_MB}MB)"
          
          # Test basic functionality (skip for cross-compiled ARM64)
          if [[ "$BINARY" != *"arm64"* ]] && [[ "$BINARY" != *"aarch64"* ]]; then
            echo "🔍 Testing functionality..."
            "$BINARY" --version
            "$BINARY" --help | head -5
          else
            echo "⏭️  Skipping functionality test for cross-compiled ARM64 binary"
          fi
          
          echo "✅ Binary test passed: $BINARY"
        done

    # Upload artifacts
    - name: Upload Build Artifacts
      if: steps.should-build.outputs.should-build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ferrocp-${{ matrix.platform }}-binaries
        path: |
          dist/*/ferrocp*
          !dist/*.json
          !dist/*.yaml
        retention-days: 7

  # Performance comparison (only on Linux for consistency)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.event.inputs.platforms || 'linux', 'linux')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Download Linux binaries
      uses: actions/download-artifact@v4
      with:
        name: ferrocp-linux-binaries
        path: ./binaries

    - name: Run performance comparison
      run: |
        echo "🚀 Running performance comparison..."
        
        # Find the Linux x86_64 binary
        BINARY=$(find ./binaries -name "ferrocp" | grep x86_64 | head -1)
        
        if [ -f "$BINARY" ]; then
          chmod +x "$BINARY"
          echo "✅ Found binary: $BINARY"
          
          # Create test data
          mkdir -p test-data
          dd if=/dev/urandom of=test-data/test-10mb.dat bs=1M count=10
          
          # Basic performance test
          echo "🏃 Running basic copy test..."
          time "$BINARY" copy test-data/test-10mb.dat test-data/test-10mb-copy.dat
          
          # Verify copy
          if cmp test-data/test-10mb.dat test-data/test-10mb-copy.dat; then
            echo "✅ Copy verification passed"
          else
            echo "❌ Copy verification failed"
            exit 1
          fi
          
          echo "🎉 Performance test completed"
        else
          echo "❌ No suitable binary found for performance testing"
          exit 1
        fi

  # Build summary
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: always()
    steps:
    - name: Generate Summary
      run: |
        echo "🎯 Multi-Platform Build Summary:"
        echo "  Build Status: ${{ needs.build.result }}"
        echo "  Performance Test: ${{ needs.performance-test.result }}"
        echo "  PGO Enabled: ${{ github.event.inputs.enable-pgo || 'true' }}"
        echo "  Platforms: ${{ github.event.inputs.platforms || 'linux,darwin,windows' }}"
        
        if [ "${{ needs.build.result }}" != "success" ]; then
          echo "❌ Build failed"
          exit 1
        else
          echo "✅ Build completed successfully"
        fi
