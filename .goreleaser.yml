# GoReleaser configuration for FerroCP
# See: https://goreleaser.com/customization/

# GoReleaser v2 configuration
version: 2

# Project metadata
project_name: ferrocp

# Environment variables
env:
  - GO111MODULE=off  # Disable Go modules since this is a Rust project

# Before hooks - run before building
before:
  hooks:
    # Add all VFX Platform supported targets
    - rustup target add x86_64-pc-windows-msvc
    - rustup target add x86_64-unknown-linux-gnu
    - rustup target add aarch64-unknown-linux-gnu
    - rustup target add x86_64-apple-darwin
    - rustup target add aarch64-apple-darwin
    # Install cross-compilation tools for Linux ARM64
    - |
      if [ "$(uname)" = "Linux" ]; then
        echo "üîß Installing cross-compilation tools..."
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      fi
    # Run basic checks
    - cargo fmt --all -- --check
    - cargo test --workspace --exclude ferrocp-python

# Build configuration for Rust binaries following VFX Platform standards
builds:
  # Linux x86_64 - VFX Platform CY2025: gcc 11.2.1+, glibc 2.28+
  - id: ferrocp-linux-amd64
    binary: ferrocp
    main: ./scripts/fake-main.go
    goos: [linux]
    goarch: [amd64]
    env:
      - CGO_ENABLED=0
      - BLAKE3_NO_ASM=1
    hooks:
      pre: |
        echo "üêß Building Linux x86_64 binary with PGO optimization..."
        chmod +x scripts/pgo-build.sh
        scripts/pgo-build.sh x86_64-unknown-linux-gnu
      post: cp target/x86_64-unknown-linux-gnu/release/ferrocp {{ .Path }}

  # Linux ARM64 - Modern VFX workflows (Cross-compiled)
  - id: ferrocp-linux-arm64
    binary: ferrocp
    main: ./scripts/fake-main.go
    goos: [linux]
    goarch: [arm64]
    env:
      - CGO_ENABLED=0
      - BLAKE3_NO_ASM=1
      # Cross-compilation environment
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - AR=aarch64-linux-gnu-ar
      - CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
      - PKG_CONFIG_ALLOW_CROSS=1
    hooks:
      pre: |
        echo "üêß Cross-compiling Linux ARM64 binary with PGO..."
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AR=aarch64-linux-gnu-ar
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        export PKG_CONFIG_ALLOW_CROSS=1
        chmod +x scripts/pgo-build.sh
        scripts/pgo-build.sh aarch64-unknown-linux-gnu
      post: cp target/aarch64-unknown-linux-gnu/release/ferrocp {{ .Path }}

  # macOS x86_64 - VFX Platform CY2025: macOS 12.0+ minimum deployment target
  - id: ferrocp-darwin-amd64
    binary: ferrocp
    main: ./scripts/fake-main.go
    goos: [darwin]
    goarch: [amd64]
    env:
      - CGO_ENABLED=0
      - MACOSX_DEPLOYMENT_TARGET=12.0
    hooks:
      pre: |
        echo "üçé Building macOS x86_64 binary with PGO optimization..."
        chmod +x scripts/pgo-build.sh
        scripts/pgo-build.sh x86_64-apple-darwin
      post: cp target/x86_64-apple-darwin/release/ferrocp {{ .Path }}

  # macOS ARM64 (Apple Silicon) - VFX Platform CY2025+
  - id: ferrocp-darwin-arm64
    binary: ferrocp
    main: ./scripts/fake-main.go
    goos: [darwin]
    goarch: [arm64]
    env:
      - CGO_ENABLED=0
      - MACOSX_DEPLOYMENT_TARGET=14.0
    hooks:
      pre: |
        echo "üçé Building macOS ARM64 binary with PGO optimization..."
        chmod +x scripts/pgo-build.sh
        scripts/pgo-build.sh aarch64-apple-darwin
      post: cp target/aarch64-apple-darwin/release/ferrocp {{ .Path }}

  # Windows x86_64 - VFX Platform CY2025: VS 2022 v17.6+, Windows SDK 10.0.20348+
  - id: ferrocp-windows-amd64
    binary: ferrocp
    main: ./scripts/fake-main.go
    goos: [windows]
    goarch: [amd64]
    env:
      - CGO_ENABLED=0
    hooks:
      pre: powershell -ExecutionPolicy Bypass -File scripts/pgo-build-windows.ps1 -Target x86_64-pc-windows-msvc
      post: powershell -Command "Copy-Item target\x86_64-pc-windows-msvc\release\ferrocp.exe {{ .Path }}"



# Archive configuration for VFX Platform distributions
archives:
  - id: ferrocp-archives
    ids:
      - ferrocp-linux-amd64
      - ferrocp-linux-arm64
      - ferrocp-darwin-amd64
      - ferrocp-darwin-arm64
      - ferrocp-windows-amd64
    name_template: "{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}"
    format_overrides:
      - goos: windows
        formats: [zip]
      - goos: linux
        formats: [tar.gz]
      - goos: darwin
        formats: [tar.gz]
    files:
      - README.md
      - README_zh.md
      - LICENSE*
      - docs/VFX_PLATFORM_COMPATIBILITY.md

# Checksum configuration
checksum:
  name_template: "{{ .ProjectName }}-{{ .Version }}-checksums.txt"
  algorithm: sha256

# Snapshot configuration (for non-tag builds)
snapshot:
  version_template: "{{ .Version }}-next"

# Changelog configuration
changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^chore:"
      - "^style:"
      - "^refactor:"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
  groups:
    - title: "Features"
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: "Bug Fixes"
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: "Security"
      regexp: "^.*security[(\\w)]*:+.*$"
      order: 2
    - title: "Documentation"
      regexp: "^.*docs[(\\w)]*:+.*$"
      order: 3
    - title: "Performance"
      regexp: "^.*perf[(\\w)]*:+.*$"
      order: 4
    - title: "Maintenance"
      regexp: "^.*chore[(\\w)]*:+.*$"
      order: 5

# GitHub Release configuration
release:
  github:
    owner: loonghao
    name: FerroCP
  name_template: "FerroCP {{ .Version }}"
  prerelease: auto
