[package]
name = "ferrocp-python"
description = "Python API bindings for FerroCP"
version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
keywords.workspace = true
categories.workspace = true
rust-version.workspace = true

[lib]
name = "_ferrocp"
crate-type = ["cdylib"]

# Disable doctests for Python extension modules
# as they require Python runtime and cause DLL dependency issues
doctest = false

[lints]
workspace = true

[dependencies]
ferrocp-types = { path = "../ferrocp-types", features = ["async"] }
ferrocp-config = { path = "../ferrocp-config" }
ferrocp-engine = { path = "../ferrocp-engine" }
ferrocp-io = { path = "../ferrocp-io" }
ferrocp-sync = { path = "../ferrocp-sync" }
ferrocp-network = { path = "../ferrocp-network" }

# Python bindings
pyo3 = { workspace = true, features = ["extension-module", "abi3-py39"] }
pyo3-async-runtimes = { version = "0.24", features = ["tokio-runtime"] }

# Async runtime
tokio = { workspace = true, features = ["full"] }
futures = { workspace = true }

# Serialization
serde = { workspace = true, features = ["derive"], optional = true }

# Utilities
tracing = { workspace = true }
uuid = { version = "1.6", features = ["v4"] }
rayon = "1.8"
once_cell = "1.19"

[dev-dependencies]
tokio-test = { workspace = true }
rstest = { workspace = true }
tempfile = { workspace = true }

# Platform-specific configuration
# On Windows, Python extension tests have DLL dependency issues
# We disable tests for cdylib crates to avoid these issues

# Build script to handle platform-specific configuration
[build-dependencies]

# Disable tests for this crate as it's a Python extension module
# Tests should be written in Python and run with pytest

[features]
# Feature flag to enable integration tests (disabled by default)
test-integration = []
# Enable serde serialization support
serde = ["dep:serde"]
